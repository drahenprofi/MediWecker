@page "/plans/edit/{Id}"
@using MediWeckerUI.Application.Features.Planning

<div class="container mx-auto max-w-3xl p-4 animate-fade-move-in">
    @if (Plan == null)
    {
    }
    else
    {
        <div>
            <div class="text-sm">Detailansicht</div>
            <div class="text-xl">@Plan.Name</div>
        </div>

        <div class="mt-4 gap-4 flex flex-col">
            <div>
                <div class="text-sm text-gray-500">Medikamentenname</div>

                @if (!IsEditingName)
                {
                    <div class="flex items-center justify-between gap-2">
                        <div class="font-semibold">@Plan.Name</div>
                        <button class="bg-gray-100 text-gray-400 p-2 rounded-md" @onclick="OnClickEditNameAsync">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"></path>
                            </svg>
                        </button>
                    </div>
                }
                else
                {
                    <div class="mt-2">
                        <EditNameComponent Name="@Plan.Name" OnNewName="OnNewNameAsync"/>
                    </div>
                }
            </div>

            <div>
                <div class="text-sm text-gray-500">Einnahmemenge</div>

                @if (!IsEditingAmount)
                {
                    <div class="flex items-center justify-between gap-2">
                        <div class="font-semibold">@Plan.Amount</div>
                        <button class="bg-gray-100 text-gray-400 p-2 rounded-md" @onclick="OnClickEditAmountAsync">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"></path>
                            </svg>
                        </button>
                    </div>
                }
                else
                {
                    <div class="mt-2">
                        <EditAmountComponent Amount="@Plan.Amount" OnNewAmount="OnNewAmountAsync"/>
                    </div>
                }
            </div>

            <div>
                <div class="text-sm text-gray-500">Rythmus</div>

                @if (!IsEditingRythm)
                {
                    <div class="flex items-center justify-between gap-2">
                        <div class="font-semibold">
                            @if (Rythm.IntervalDays?.Days == 1)
                            {
                                <span>Täglich</span>
                            }
                            else if (Rythm.IntervalDays != null)
                            {
                                <span>Jeden @(Rythm.IntervalDays.Days). Tag</span>
                            }
                            else if (Rythm.SpecificDays != null)
                            {
                                var dayNames = new List<string>();

                                if (Rythm.SpecificDays.Monday)
                                    dayNames.Add("Montag");
                                if (Rythm.SpecificDays.Tuesday)
                                    dayNames.Add("Dienstag");
                                if (Rythm.SpecificDays.Wednesday)
                                    dayNames.Add("Mittwoch");
                                if (Rythm.SpecificDays.Thursday)
                                    dayNames.Add("Donnerstag");
                                if (Rythm.SpecificDays.Friday)
                                    dayNames.Add("Freitag");
                                if (Rythm.SpecificDays.Saturday)
                                    dayNames.Add("Samstag");
                                if (Rythm.SpecificDays.Sunday)
                                    dayNames.Add("Sonntag");

                                <span>Jeden @string.Join(", ", dayNames)</span>
                            }
                        </div>
                        <button class="bg-gray-100 text-gray-400 p-2 rounded-md" @onclick="OnClickEditRythmAsync">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"></path>
                            </svg>
                        </button>
                    </div>
                }
                else
                {
                    <div class="fixed inset-0 bg-white pb-20">
                        <div class="overflow-auto h-full">
                            <div class="container mx-auto max-w-3xl h-min-full p-4 animate-fade-move-in">
                                <div class="flex justify-between">
                                    <button class="h-8 w-8 bg-gray-100 rounded-md flex justify-center items-center" @onclick="() => OnBackwardAsync()">
                                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                                        </svg>
                                    </button>
                                </div>

                                <div class="mt-8">
                                    <div class="flex flex-col justify-center text-center animate-fade-move-in">
                                        <div>
                                            <div class="text-sm text-gray-500">Bearbeiten</div>
                                            <div class="text-xl font-semibold">Tagesrythmus</div>
                                        </div>

                                        <div class="mt-2">
                                            <EditRythmComponent @ref="EditRythmComponent" Rythm="RythmEditCopy" OnSubmit="OnRythmSubmitAsync" EditingMode="true" OnBackward="() => OnBackwardAsync(true)"></EditRythmComponent>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <div>
                <div class="text-sm text-gray-500">Uhrzeiten</div>

                @if (!IsEditingTimepoints)
                {
                    <div class="flex justify-between gap-2">
                        <div class="font-medium text-sm flex flex-wrap gap-2 mt-1">
                            @foreach (var timepoint in Rythm.Timepoints.Where(x => x.Type == TimepointType.AbsoluteTime))
                            {
                                <div class="bg-lime-400 px-3 py-0.5 rounded-full flex items-center">@TimeSpan.FromMinutes(timepoint.AbsoluteTimeFromMidnight.Value).ToString("hh\\:mm") Uhr</div>
                            }

                            @if (Rythm.Timepoints.Any(x => x.Type == TimepointType.Morning))
                            {
                                <div class="bg-amber-200 px-3 py-0.5 rounded-full flex items-center">
                                    <div>Morgens</div>
                                </div>
                            }

                            @if (Rythm.Timepoints.Any(x => x.Type == TimepointType.Midday))
                            {
                                <div class="bg-amber-200 px-3 py-0.5 rounded-full flex items-center">
                                    <div>Tagsüber</div>
                                </div>
                            }

                            @if (Rythm.Timepoints.Any(x => x.Type == TimepointType.Evening))
                            {
                                <div class="bg-amber-200 px-3 py-0.5 rounded-full flex items-center">
                                    <div>Abends</div>
                                </div>
                            }

                            @if (Rythm.Timepoints.Any(x => x.Type == TimepointType.Night))
                            {
                                <div class="bg-amber-200 px-3 py-0.5 rounded-full flex items-center">
                                    <div>Nachts</div>
                                </div>
                            }
                        </div>
                        <button class="bg-gray-100 text-gray-400 p-2 rounded-md" @onclick="OnClickEditTimepointsAsync">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"></path>
                            </svg>
                        </button>
                    </div>
                }
                else
                {
                    <div class="fixed inset-0 bg-white pb-20">
                        <div class="overflow-auto h-full">
                            <div class="container mx-auto max-w-3xl h-min-full p-4 animate-fade-move-in">
                                <div class="flex justify-between">
                                    <button class="h-8 w-8 bg-gray-100 rounded-md flex justify-center items-center" @onclick="() => OnBackwardAsync()">
                                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                                        </svg>
                                    </button>
                                </div>

                                <div class="mt-8">
                                    <div class="flex flex-col justify-center text-center animate-fade-move-in">
                                        <div>
                                            <div class="text-sm text-gray-500">Bearbeiten</div>
                                            <div class="text-xl font-semibold">Uhrzeiten</div>
                                        </div>

                                        <div class="mt-2">
                                            <EditTimepointsComponent Rythm="RythmEditCopy" OnSubmit="OnTimepointsSubmitAsync"></EditTimepointsComponent>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <div class="bg-red-50 px-3 py-2 rounded mt-8">
                <button class="bg-red-500 text-white px-3 py-1.5 rounded text-sm" @onclick="OnClickDeleteAsync">Plan löschen</button>
            </div>
        </div>
    }

</div>