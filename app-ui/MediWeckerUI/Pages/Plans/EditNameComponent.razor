@using FluentValidation
<div>
    <EditForm Model="EditModel" OnValidSubmit="OnSubmit">
        <FluentValidationValidator></FluentValidationValidator>

        <div>
            <div class="flex items-stretch">
                <InputText class="border-b border-gray-200 px-3 py-1 rounded-l grow min-w-0" @bind-Value="@EditModel.Name"></InputText>
                <button class="border-transparent ml-2 rounded px-3 text-sm bg-lime-200 text-lime-700 hover:bg-lime-300 transition-all">Speichern</button>
            </div>
            
            <ValidationMessage For="() => EditModel.Name"></ValidationMessage>
        </div>
    </EditForm>
</div>

@code {

    [Parameter]
    public string Name { get; set; }

    [Parameter]
    public EventCallback<string> OnNewName { get; set; }

    public EditViewModel EditModel { get; set; }

    protected override void OnParametersSet()
    {
        EditModel = new EditViewModel
        {
            Name = Name
        };
    }

    protected async Task OnSubmit()
    {
        await OnNewName.InvokeAsync(EditModel.Name);
    }

    public class EditViewModel
    {
        public string Name { get; set; }

        public class Validator : AbstractValidator<EditViewModel>
        {
            public Validator()
            {
                RuleFor(x => x.Name)
                    .NotEmpty()
                    .WithMessage("Name ist ein Pflichtfeld.");
            }
        }
    }

}