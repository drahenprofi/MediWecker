@using MediWeckerUI.Application.Features.Planning
@using System.Globalization
@using System.Text.Json

<EditForm Model="ViewModelData">
    <div>
        <div class="flex justify-between items-center mb-2 ">
            <label class="block text-sm font-medium text-gray-900">Einnahme..</label>
            <button class="bg-gray-200/75 hover:bg-gray-300 transition-all p-1.5 px-2 rounded-md text-gray-600 flex items-center" @onclick="async () => await OnDelete.InvokeAsync()">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                </svg>
            </button>
        </div>
        <InputSelect @bind-Value="ViewModelData.Type" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-md block w-full p-2.5">
            @if (Rythm.Timepoints.Except(new[] { Timepoint }).All(x => x.Type != TimepointType.Morning))
            {
                <option value="@TimepointType.Morning.ToString()">am Morgen</option>
            }

            @if (Rythm.Timepoints.Except(new[] { Timepoint }).All(x => x.Type != TimepointType.Midday))
            {
                <option value="@TimepointType.Midday.ToString()">am Tag</option>
            }

            @if (Rythm.Timepoints.Except(new[] { Timepoint }).All(x => x.Type != TimepointType.Evening))
            {
                <option value="@TimepointType.Evening.ToString()">am Abend</option>
            }

            @if (Rythm.Timepoints.Except(new[] { Timepoint }).All(x => x.Type != TimepointType.Night))
            {
                <option value="@TimepointType.Night.ToString()">in der Nacht</option>
            }

            <option value="@TimepointType.AbsoluteTime.ToString()">zu einer festen Uhrzeit</option>
        </InputSelect>
    </div>

    @if (ViewModelData.Type == TimepointType.AbsoluteTime)
    {
        <div class="mt-4">
            <label class="block mb-2 text-sm font-medium text-gray-900">Uhrzeit</label>
            <InputText type="time" @bind-Value="ViewModelData.TimeString" @bind-Value:after="TypeUpdatedAsync" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-md block w-full p-2.5"></InputText>
        </div>
    }
</EditForm>

@code {

    [Parameter]
    public Application.Features.Planning.Rythm Rythm { get; set; }

    [Parameter]
    public Timepoint Timepoint { get; set; }

    [Parameter]
    public EventCallback OnDelete { get; set; }
    
    [CascadingParameter]
    public EditTimepointsComponent Parent { get; set; }

    public ViewModel ViewModelData { get; set; }

    protected override void OnInitialized()
    {
        Console.WriteLine($"Loading: {JsonSerializer.Serialize(Timepoint)}");

        ViewModelData = new ViewModel
        {
            Type = Timepoint.Type,
            TimeString = Timepoint.AbsoluteTimeFromMidnight != null ? TimeSpan.FromMinutes(Timepoint.AbsoluteTimeFromMidnight.Value).ToString("hh\\:mm\\:ss") : "00:00:00"
        };
        
        Parent.UpdateChildren += UpdateChildren;

        base.OnInitialized();
    }

    private void UpdateChildren(object? sender, EventArgs e)
    {
        StateHasChanged();
    }

    private async Task TypeUpdatedAsync()
    {
        Console.WriteLine("TimepointEntry updated type. Notifying parent.");
        await Parent.UpdateAllChildrenAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (ViewModelData.Type == TimepointType.AbsoluteTime)
        {
            Console.WriteLine(ViewModelData.TimeString);

            if (TimeSpan.TryParseExact(ViewModelData.TimeString, "hh\\:mm\\:ss", CultureInfo.InvariantCulture, out var result))
            {
                Timepoint.AbsoluteTimeFromMidnight = (int) result.TotalMinutes;
            }
        }
        else
        {
            Timepoint.AbsoluteTimeFromMidnight = null;
        }

        if (Timepoint.Type != ViewModelData.Type)
        {
            // Type updated, notify parent so other timepoints refresh their available type options
            await Parent.UpdateAllChildrenAsync();
        }

        Timepoint.Type = ViewModelData.Type;

        await base.OnAfterRenderAsync(firstRender);
    }

    public class ViewModel
    {
        public TimepointType Type { get; set; }
        public string TimeString { get; set; }
    }

}