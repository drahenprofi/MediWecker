@page "/plans/rythm/wizard"
@using MediWeckerUI.Application.Features
@using MediWeckerUI.Application
@using MediWeckerUI.Application.Features.Planning
@using Index = MediWeckerUI.Pages.Plans.Index
@using System.Text.Json
@using MediWeckerUI.Application.Features.Navigation
@layout WizardLayout
@implements IDisposable

@code {
    private Medicine Plan { get; set; }
    private Rythm Rythm { get; set; }
    private Step CurrentStep { get; set; }

    [Inject]
    public AppInterop Interop { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }
    
    [Inject]
    public WebViewNavigationHistory NavigationHistory { get; set; }

    [CascadingParameter]
    public BaseNavigationLayout BaseLayout { get; set; }

    public EditNameComponent EditNameComponent { get; set; }
    public EditRythmComponent EditRythmComponent { get; set; }
    public EditAmountComponent EditAmountComponent { get; set; }

    private string Guid = System.Guid.NewGuid().ToString();
    
    protected override Task OnInitializedAsync()
    {
        Console.WriteLine($"Wizard: OnInitializedAsync witwh instance id = {Guid}");
        
        NavigationHistory.BackEvent += BackEvent;
        
        Plan = new Medicine
        {
        };

        Rythm = new Rythm
        {
            Timepoints = new List<Timepoint>()
        };

        return base.OnInitializedAsync();
    }

    private async void BackEvent(object? sender, EventArgs e)
    {
        await OnBackwardAsync();
    }

    private async Task OnCompleted()
    {
        await Interop.AddPlanAsync(Plan);
        await Interop.ShowAlertAsync("Medikationsplan wurde erfolgreich erstellt.");

        BaseLayout.Navigate<Index>();
    }

    public async Task OnBackwardAsync(bool entireStep = false)
    {
        Console.WriteLine($"Wizard: OnBackwardAsync called, current step = {CurrentStep}");
        
        if (CurrentStep == Step.Name)
        {
            BaseLayout.Navigate<Index>();
        }
        else if (CurrentStep == Step.DayRythm)
        {
            if (!entireStep)
            {
                await EditRythmComponent.GoBackwardAsync();
            }
            else
            {
                CurrentStep = Step.Name;
            }
        }
        else if (CurrentStep == Step.Timepoints)
        {
            CurrentStep = Step.DayRythm;
        }
        else if (CurrentStep == Step.Amount)
        {
            CurrentStep = Step.Timepoints;
        }
        else if (CurrentStep == Step.Finished)
        {
            CurrentStep = Step.Amount;
        }

        InvokeAsync(StateHasChanged);
    }

    protected async Task OnRythmSubmit()
    {
        Plan.Rythm = JsonSerializer.Serialize(Rythm);
        CurrentStep = Step.Timepoints;

        StateHasChanged();
    }

    protected async Task OnTimepointsSubmit()
    {
        Console.WriteLine("OnTimepointsSubmit");

        // Prune data to remove redudant timepoints (e.g. 2 times morning, or 2 timepoints at the same time).
        void RemoveDuplicates(Func<Timepoint, bool> selector, Func<Timepoint, object> keySelector)
        {
            List<object> keys = new List<object>();
            
            foreach (var timepoint in Rythm.Timepoints.ToArray())
            {
                if (!selector(timepoint))
                    continue;

                if (!keys.Contains(keySelector(timepoint)))
                {
                    keys.Add(keySelector(timepoint));
                }
                else
                {
                    Rythm.Timepoints.Remove(timepoint); // Duplicate according to selector
                }
            }
        }
        
        RemoveDuplicates(x => x.Type == TimepointType.Morning, x => x.Type);
        RemoveDuplicates(x => x.Type == TimepointType.Midday, x => x.Type);
        RemoveDuplicates(x => x.Type == TimepointType.Evening, x => x.Type);
        RemoveDuplicates(x => x.Type == TimepointType.Night, x => x.Type);
        RemoveDuplicates(x => x.Type == TimepointType.AbsoluteTime, x => x.AbsoluteTimeFromMidnight);
        
        Plan.Rythm = JsonSerializer.Serialize(Rythm);
        CurrentStep = Step.Amount;

        StateHasChanged();
    }

    protected async Task OnAmountSubmit(string amount)
    {
        Plan.Amount = amount;
        CurrentStep = Step.Finished;

        StateHasChanged();
    }

    private enum Step
    {
        Name,
        DayRythm,
        Timepoints,
        Amount,
        Finished
    }

    public void Dispose()
    {
        Console.WriteLine($"Wizard: Disposing instance id = {Guid}");
        
        NavigationHistory.BackEvent -= BackEvent;
    }

}

<CascadingValue Value="this">
    <div class="container mx-auto max-w-3xl h-min-full p-4 animate-fade-move-in">
        <div class="flex justify-between">
            <button class="h-8 w-8 bg-gray-100 rounded-md flex justify-center items-center" @onclick="() => OnBackwardAsync(entireStep: false)">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
            </button>
        </div>

        <div class="mt-8">
            @if (CurrentStep == Step.Name)
            {
                <div class="flex flex-col justify-center text-center animate-fade-move-in">
                    <div>
                        <div class="text-sm text-gray-500">Schritt 1</div>
                        <div class="text-xl font-semibold">Name</div>
                    </div>

                    <div class="mt-4">
                        Wie heißt das Medikament, dass Sie einnehmen werden?
                    </div>
                    <div class="mt-4">
                        <EditNameComponent @ref="EditNameComponent" Name="@Plan.Name" OnNewName="@(s => { Plan.Name = s; CurrentStep = Step.DayRythm; InvokeAsync(StateHasChanged); })"/>
                    </div>
                </div>
            }

            @if (CurrentStep == Step.DayRythm)
            {
                <div class="flex flex-col justify-center text-center animate-fade-move-in">
                    <div>
                        <div class="text-sm text-gray-500">Schritt 2</div>
                        <div class="text-xl font-semibold">Tagesrythmus</div>
                    </div>
                    
                    <div class="mt-4">
                        <EditRythmComponent @ref="EditRythmComponent" Rythm="Rythm" OnBackward="async () => await OnBackwardAsync(entireStep: true)" OnSubmit="OnRythmSubmit"></EditRythmComponent>
                    </div>
                </div>
            }

            @if (CurrentStep == Step.Timepoints)
            {
                <div class="flex flex-col justify-center text-center animate-fade-move-in">
                    <div>
                        <div class="text-sm text-gray-500">Schritt 3</div>
                        <div class="text-xl font-semibold">Zeitpunkte</div>
                    </div>

                    <div class="mt-4">
                        <EditTimepointsComponent Rythm="Rythm" OnSubmit="OnTimepointsSubmit"></EditTimepointsComponent>
                    </div>
                </div>
            }

            @if (CurrentStep == Step.Amount)
            {
                <div class="flex flex-col justify-center text-center animate-fade-move-in">
                    <div>
                        <div class="text-sm text-gray-500">Schritt 4</div>
                        <div class="text-xl font-semibold">Einnahmemenge</div>
                    </div>

                    <div class="mt-4">
                        Bitte geben Sie an, wie viel Sie des Medikaments nehmen möchten.
                    </div>
                    
                    <div class="mt-4 bg-slate-50 p-3 text-sm text-slate-500">
                        In diesem Feld können Sie jede beliebige Angabe eingeben (zum Beispiel "1/2 Tabletten" oder "1 Dragee").
                    </div>

                    <div class="mt-4">
                        <EditAmountComponent Amount="@Plan.Amount" OnNewAmount="@(async amount => OnAmountSubmit(amount))"/>
                    </div>
                </div>
            }

            @if (CurrentStep == Step.Finished)
            {
                <div class="flex flex-col justify-center items-center animate-fade-move-in text-center">
                    <div class="text-center">
                        <div class="text-sm text-gray-500">Fast fertig!</div>
                        <div class="text-xl font-semibold">Stimmt alles?</div>
                    </div>

                    <div class="mt-10">
                        <div class="text-sm text-gray-500">Name</div>
                        <div class="text-lg font-medium">@Plan.Name</div>
                    </div>

                    <div class="mt-4">
                        <div class="text-sm text-gray-500">Einnahmemenge</div>
                        <div class="text-lg font-medium">@Plan.Amount</div>
                    </div>

                    <div class="mt-4">
                        <div class="text-sm text-gray-500">Rythmus</div>
                        <div class="text-lg font-medium">
                            @if (Rythm.IntervalDays?.Days == 1)
                            {
                                <span>Täglich</span>
                            }
                            else if (Rythm.IntervalDays != null)
                            {
                                <span>Jeden @(Rythm.IntervalDays.Days). Tag</span>
                            }
                            else if (Rythm.SpecificDays != null)
                            {
                                var dayNames = new List<string>();

                                if (Rythm.SpecificDays.Monday) dayNames.Add("Montag");
                                if (Rythm.SpecificDays.Tuesday) dayNames.Add("Dienstag");
                                if (Rythm.SpecificDays.Wednesday) dayNames.Add("Mittwoch");
                                if (Rythm.SpecificDays.Thursday) dayNames.Add("Donnerstag");
                                if (Rythm.SpecificDays.Friday) dayNames.Add("Freitag");
                                if (Rythm.SpecificDays.Saturday) dayNames.Add("Samstag");
                                if (Rythm.SpecificDays.Sunday) dayNames.Add("Sonntag");

                                <span>Jeden @string.Join(", ", dayNames)</span>
                            }
                        </div>
                    </div>

                    <div class="mt-4">
                        <div class="text-sm text-gray-500">Uhrzeit</div>
                        <div class="font-medium text-sm flex flex-wrap gap-2 mt-1">
                            @foreach (var timepoint in Rythm.Timepoints.Where(x => x.Type == TimepointType.AbsoluteTime))
                            {
                                <div class="bg-lime-400 px-3 py-0.5 rounded-full flex items-center">@TimeSpan.FromMinutes(timepoint.AbsoluteTimeFromMidnight.Value).ToString("hh\\:mm") Uhr</div>
                            }

                            @if (Rythm.Timepoints.Any(x => x.Type == TimepointType.Morning))
                            {
                                <div class="bg-amber-200 px-3 py-0.5 rounded-full flex items-center">
                                    <div>Morgens</div>
                                </div>
                            }

                            @if (Rythm.Timepoints.Any(x => x.Type == TimepointType.Midday))
                            {
                                <div class="bg-amber-200 px-3 py-0.5 rounded-full flex items-center">
                                    <div>Tagsüber</div>
                                </div>
                            }

                            @if (Rythm.Timepoints.Any(x => x.Type == TimepointType.Evening))
                            {
                                <div class="bg-amber-200 px-3 py-0.5 rounded-full flex items-center">
                                    <div>Abends</div>
                                </div>
                            }

                            @if (Rythm.Timepoints.Any(x => x.Type == TimepointType.Night))
                            {
                                <div class="bg-amber-200 px-3 py-0.5 rounded-full flex items-center">
                                    <div>Nachts</div>
                                </div>
                            }
                        </div>
                    </div>

                    <div class="text-center mt-10 text-sm">
                        Stimmt etwas nicht? Nutzen Sie die Zurück-Taste oben links, um Ihre Eingaben zu bearbeiten.    
                    </div>
                    
                    <button class="button-primary mt-4 py-2 w-full self-stretch text-center" @onclick="OnCompleted">
                        Alles korrekt!
                    </button>
                </div>
            }
        </div>
    </div>
</CascadingValue>