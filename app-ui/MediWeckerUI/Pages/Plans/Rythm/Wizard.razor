@page "/plans/rythm/wizard"
@using MediWeckerUI.Application.Features
@using MediWeckerUI.Application
@using MediWeckerUI.Application.Features.Planning
@using Index = MediWeckerUI.Pages.Plans.Index
@using System.Text.Json
@layout WizardLayout

@code {
    private Medicine Plan { get; set; }
    private Rythm Rythm { get; set; }
    private Step CurrentStep { get; set; }

    [Inject]
    public AppInterop Interop { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    [CascadingParameter]
    public BaseNavigationLayout BaseLayout { get; set; }

    public EditNameComponent EditNameComponent { get; set; }
    public EditRythmComponent EditRythmComponent { get; set; }
    public EditAmountComponent EditAmountComponent { get; set; }

    protected override Task OnInitializedAsync()
    {
        Plan = new Medicine
        {
        };

        Rythm = new Rythm();

        return base.OnInitializedAsync();
    }

    private async Task OnCompleted()
    {
        await Interop.AddPlanAsync(Plan);
        await Interop.ShowAlertAsync("Medikationsplan wurde erfolgreich erstellt.");

        BaseLayout.Navigate<Index>();
    }

    public async Task OnBackwardAsync(bool entireStep = false)
    {
        if (CurrentStep == Step.Name)
        {
            BaseLayout.Navigate<Index>();
        }
        else if (CurrentStep == Step.DayRythm)
        {
            if (!entireStep)
            {
                await EditRythmComponent.GoBackwardAsync();
            }
            else
            {
                CurrentStep = Step.Name;
            }
        }
        else if (CurrentStep == Step.Timepoints)
        {
            CurrentStep = Step.DayRythm;
        }
        else if (CurrentStep == Step.Amount)
        {
            CurrentStep = Step.Timepoints;
        }
    }

    protected async Task OnNewRythmAsync(Rythm rythm)
    {
        Plan.Rythm = JsonSerializer.Serialize(rythm);
        CurrentStep = Step.Timepoints;

        StateHasChanged();
        ;
    }

    private enum Step
    {
        Name,
        DayRythm,
        Timepoints,
        Amount,
        Finished
    }

}

<CascadingValue Value="this">
    <div class="container mx-auto max-w-3xl h-full p-4 animate-fade-move-in">
        <div class="flex justify-between">
            <button class="h-8 w-8 bg-gray-200 rounded-md flex justify-center items-center" @onclick="() => OnBackwardAsync(entireStep: false)">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
            </button>
        </div>

        <div class="mt-8">
            @if (CurrentStep == Step.Name)
            {
                <div class="flex flex-col justify-center text-center animate-fade-move-in">
                    <div>
                        <div class="text-sm text-gray-500">Schritt 1</div>
                        <div class="text-xl font-semibold">Name</div>
                    </div>

                    <div class="mt-2">
                        Bitte geben Sie an, mit welchem Namen der Medikationsplan angezeigt werden soll.
                    </div>
                    <div class="mt-10">
                        <EditNameComponent @ref="EditNameComponent" Name="" OnNewName="@(s => { Plan.Name = s; CurrentStep = Step.DayRythm; InvokeAsync(StateHasChanged); })"/>
                    </div>
                </div>
            }

            @if (CurrentStep == Step.DayRythm)
            {
                <div class="flex flex-col justify-center text-center animate-fade-move-in">
                    <div>
                        <div class="text-sm text-gray-500">Schritt 2</div>
                        <div class="text-xl font-semibold">Tagesrythmus</div>
                    </div>

                    <div class="mt-2">
                        <EditRythmComponent @ref="EditRythmComponent" Rythm="Rythm" OnBackward="async () => await OnBackwardAsync(entireStep: true)" OnNewRythm="OnNewRythmAsync"></EditRythmComponent>
                    </div>
                </div>
            }

            @if (CurrentStep == Step.Timepoints)
            {
                <div class="flex flex-col justify-center text-center animate-fade-move-in">
                    <div>
                        <div class="text-sm text-gray-500">Schritt 3</div>
                        <div class="text-xl font-semibold">Zeitpunkte</div>
                    </div>

                    <div class="mt-2">
                        
                    </div>
                </div>
            }
        </div>
    </div>
</CascadingValue>