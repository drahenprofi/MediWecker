@page "/settings"
@using MediWeckerUI.Application.Features.Navigation
@using MediWeckerUI.Application.Features.Planning
@using MediWeckerUI.Application
@implements IDisposable

@code {

    [CascadingParameter]
    public MainLayout Layout { get; set; }

    [CascadingParameter]
    public BaseNavigationLayout BaseLayout { get; set; }

    [Inject]
    public WebViewNavigationHistory NavigationHistory { get; set; }

    [Inject]
    public AppInterop AppInterop { get; set; }

    public WakeUpTimeData WakeUpTimeData { get; set; }
    public bool IsEditingWakeUpTimeData { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Layout.UpdateTab(MainLayout.NavigationTab.Settings);
        Console.WriteLine("Settings: Instance created");

        NavigationHistory.BackEvent += BackEvent;

        WakeUpTimeData = await AppInterop.GetWakeUpTimeDataAsync();
    }

    protected async Task OnClickEditWakeUpTimeDataAsync()
    {
        IsEditingWakeUpTimeData = true;
        await InvokeAsync(StateHasChanged);
    }

    private async void BackEvent(object? sender, EventArgs e)
    {
        await OnBackwardAsync();
    }

    public async Task OnBackwardAsync()
    {
        if (IsEditingWakeUpTimeData)
        {
            IsEditingWakeUpTimeData = false;
            StateHasChanged();
        }
        else
        {
            BaseLayout.Navigate<Pages.Index>();
        }
    }

    protected async Task OnSubmitWakeUpTimeDataAsync()
    {
        await AppInterop.UpdateWakeUpTimeDataAsync(WakeUpTimeData);
        await AppInterop.ShowAlertAsync("Ihre Aufsteh-Uhrzeiten wurden aktualisiert.");

        IsEditingWakeUpTimeData = false;
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationHistory.BackEvent -= BackEvent;
    }

}

<div class="container mx-auto max-w-3xl p-4 animate-fade-move-in">
    <div class="text-2xl">Einstellungen</div>

    <div class="mt-8 flex flex-col gap-4">
        @if (WakeUpTimeData != null)
        {
            <div class="flex justify-between gap-2">
                <div>
                    <div class="text-sm text-gray-500">Aufstehuhrzeit(en)</div>

                    <div class="flex justify-between gap-2 mt-1">
                        <div class="flex flex-col gap-1.5">
                            @if (WakeUpTimeData.IsSingleTime())
                            {
                                <div>Jeden Tag um @TimeSpan.FromMinutes(WakeUpTimeData.Monday).ToString("hh\\:mm") Uhr</div>
                            }
                            else
                            {
                                <div class="flex items-center mt-1">
                                    <div class="shrink-0 w-10">Mo</div>
                                    <div class="px-3 py-0.5 bg-gray-50 text-sm rounded-full font-medium">@TimeSpan.FromMinutes(WakeUpTimeData.Monday).ToString("hh\\:mm") Uhr</div>
                                </div>

                                <div class="flex">
                                    <div class="shrink-0 w-10">Di</div>
                                    <div class="px-3 py-0.5 bg-gray-50 text-sm rounded-full font-medium">@TimeSpan.FromMinutes(WakeUpTimeData.Tuesday).ToString("hh\\:mm") Uhr</div>
                                </div>

                                <div class="flex">
                                    <div class="shrink-0 w-10">Mi</div>
                                    <div class="px-3 py-0.5 bg-gray-50 text-sm rounded-full font-medium">@TimeSpan.FromMinutes(WakeUpTimeData.Wednesday).ToString("hh\\:mm") Uhr</div>
                                </div>

                                <div class="flex">
                                    <div class="shrink-0 w-10">Do</div>
                                    <div class="px-3 py-0.5 bg-gray-50 text-sm rounded-full font-medium">@TimeSpan.FromMinutes(WakeUpTimeData.Thursday).ToString("hh\\:mm") Uhr</div>
                                </div>

                                <div class="flex">
                                    <div class="shrink-0 w-10">Fr</div>
                                    <div class="px-3 py-0.5 bg-gray-50 text-sm rounded-full font-medium">@TimeSpan.FromMinutes(WakeUpTimeData.Friday).ToString("hh\\:mm") Uhr</div>
                                </div>

                                <div class="flex">
                                    <div class="shrink-0 w-10">Sa</div>
                                    <div class="px-3 py-0.5 bg-gray-50 text-sm rounded-full font-medium">@TimeSpan.FromMinutes(WakeUpTimeData.Saturday).ToString("hh\\:mm") Uhr</div>
                                </div>

                                <div class="flex">
                                    <div class="shrink-0 w-10">So</div>
                                    <div class="px-3 py-0.5 bg-gray-50 text-sm rounded-full font-medium">@TimeSpan.FromMinutes(WakeUpTimeData.Sunday).ToString("hh\\:mm") Uhr</div>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <button class="bg-gray-100 text-gray-400 p-2 rounded-md self-start" @onclick="OnClickEditWakeUpTimeDataAsync">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"></path>
                    </svg>
                </button>
            </div>

            if (IsEditingWakeUpTimeData)
            {
                <div class="fixed inset-0 bg-white pb-20">
                    <div class="overflow-auto h-full">
                        <div class="container mx-auto max-w-3xl h-min-full p-4 animate-fade-move-in">
                            <div class="relative">
                                <button class="h-8 w-8 bg-gray-100 rounded-md flex justify-center items-center top-0 left-0 absolute" @onclick="OnBackwardAsync">
                                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                                    </svg>
                                </button>
                            </div>

                            <div class="flex justify-center mt-5">
                                <svg class="w-16 h-16 text-slate-200" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                            </div>

                            <div class="mt-4 text-center">
                                Bitte stellen Sie ein, zu welchen Uhrzeiten Sie aufstehen.
                            </div>

                            <div class="mt-6">
                                <MediWeckerUI.Pages.Settings.EditWakeUpTimesComponent OnSubmit="OnSubmitWakeUpTimeDataAsync" Data="WakeUpTimeData"/>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>