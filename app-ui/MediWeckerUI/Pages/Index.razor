@page "/"
@page "/assets"
@page "/index_mobile.html"
@using MediWeckerUI.Application
@using MediWeckerUI.Application.Features.Planning
@using Humanizer
@using System.Globalization
@using System.Text.Json

@code {

    [CascadingParameter]
    public MainLayout Layout { get; set; }

    [CascadingParameter]
    public BaseNavigationLayout BaseLayout { get; set; }

    [Inject]
    public AppInterop AppInterop { get; set; }

    public DateTimeOffset From { get; set; } = DateTimeOffset.UtcNow.AddDays(-1);
    public DateTimeOffset To { get; set; } = DateTimeOffset.UtcNow.AddDays(1);
    public List<CalendarItem> CalendarItems { get; set; }
    public List<Medicine> Plans { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Layout.UpdateTab(MainLayout.NavigationTab.Calendar);

        var setupRequired = await AppInterop.GetUserTimesDataSetupRequiredAsync();
        var anyPermissionRequired = !await AppInterop.GetIfInternetPermissionGivenAsync() || !await AppInterop.GetIfNotificationsPermissionGivenAsync();

        if (setupRequired || anyPermissionRequired)
        {
            BaseLayout.Navigate<Setup.Welcome>();
            return;
        }

        await RefreshCalendarAsync();
    }

    protected async Task RefreshCalendarAsync()
    {
        Plans = await AppInterop.GetAllPlansAsync();
        CalendarItems = await AppInterop.GetCalendarItemsAsync(From, To);

    //Console.WriteLine($"Test: {JsonSerializer.Serialize(CalendarItems)}");

        StateHasChanged();
    }

    protected async Task ShowMoreDaysAsync()
    {
        To = To.AddDays(1);
        await RefreshCalendarAsync();
    }


}

<div class="container mx-auto max-w-4xl p-4 animate-fade-move-in">
    <div class="text-2xl">Kalender</div>
    <div class="text-gray-400">Ihre nächsten Einnahmen</div>

    <div class="mt-5 flex flex-col gap-2">
        @if (CalendarItems != null)
        {
            if (Plans.Count == 0)
            {
                <div class="text-center text-gray-400 font-medium mt-10 text-lg">Hm, hier scheint noch nichts los zu sein..</div>
                <div class="text-center text-gray-400">Legen Sie einen Plan an, um Ihre nächsten Einnahmen hier sehen zu können.</div>
            }
            else
            {
                if (CalendarItems.Count == 0)
                {
                    <div class="text-center text-gray-400 font-medium mt-10 text-lg">Keine geplanten Einnahmen gefunden</div>
                }
                else
                {
                    bool renderedHereMarker = false;

                    foreach (var calendarItem in CalendarItems.OrderBy(x => x.ScheduledTimeUtc))
                    {
                        var intakeTime = DateTimeOffset.FromUnixTimeMilliseconds(calendarItem.ScheduledTimeUtc);
                        var actualTime = DateTimeOffset.FromUnixTimeMilliseconds(calendarItem.ActualTimeUtc);
                        var hasActualTime = calendarItem.ActualTimeUtc != 0;
                        var difference = intakeTime - DateTimeOffset.UtcNow;

                        if (intakeTime > DateTimeOffset.UtcNow && !renderedHereMarker)
                        {
                            renderedHereMarker = true;

                            <div class="bg-lime-400/90 py-0.5 px-3 text-xs font-semibold text-center rounded-full flex items-center justify-center gap-3">
                                <svg class="h-4 w-4" fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5"></path>
                                </svg>
                                <div>@DateTimeOffset.Now.ToString("HH:mm") Uhr</div>
                                <svg class="h-4 w-4" fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5"></path>
                                </svg>
                            </div>
                        }
                        
                        <button class="border-2 border-gray-50 shadow p-3 rounded flex items-center">
                            <div class="grow shrink-0 text-left">
                                <div class="text-lg font-semibold">@calendarItem.Medicine.Name</div>

                                <div class="text-sm">
                                    @calendarItem.Medicine.Amount,
                                    @intakeTime.ToLocalTime().ToString("dddd' der 'dd'., 'HH:mm' Uhr'")
                                </div>

                                <div class="mt-4 flex">
                                    @if (difference.Ticks < 0 && difference > TimeSpan.FromMinutes(-20))
                                    {
                                        <span class="bg-lime-400 text-lime-800 font-semibold px-5 py-1 rounded-full">Jetzt einnehmen</span>
                                    }
                                    else
                                    {
                                        if (difference.Ticks > 0)
                                        {
                                            <span class="bg-gray-100 font-semibold px-5 py-1 rounded-full">@intakeTime.Humanize(DateTimeOffset.UtcNow, CultureInfo.CurrentCulture)</span>
                                        }
                                        else
                                        {
                                            <span class="bg-red-700 text-red-100 font-semibold px-5 py-1 rounded-full">@intakeTime.Humanize(DateTimeOffset.UtcNow, CultureInfo.CurrentCulture)</span>
                                        }
                                    }
                                    
                                    @if (hasActualTime)
                                    {
                                        if (actualTime == intakeTime)
                                        {
                                            
                                        }
                                        else
                                        {
                                            
                                        }
                                    }
                                </div>
                            </div>

                            <div>
                                <svg class="w-6 h-6 text-gray-300 group-hover:translate-x-1 group-hover:text-gray-600 transition-all" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 5l7 7-7 7M5 5l7 7-7 7"></path>
                                </svg>
                            </div>
                        </button>
                    }
                    
                    @if (!renderedHereMarker)
                    {
                        <div class="bg-lime-400/90 py-0.5 px-3 text-xs font-semibold text-center rounded-full flex items-center justify-center gap-3">
                            <svg class="h-4 w-4" fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5"></path>
                            </svg>
                            <div>@DateTimeOffset.Now.ToString("HH:mm") Uhr</div>
                            <svg class="h-4 w-4" fill="none" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5"></path>
                            </svg>
                        </div>
                    }
                }

                <button class="p-3 rounded grid place-items-center text-center mt-5" @onclick="ShowMoreDaysAsync">
                    <div class="font-semibold">Ansicht bis @To.ToLocalTime().ToString("dddd' der 'dd'., 'HH:mm' Uhr'")</div>
                    <div class="text-sm">Hier klicken, um einen weiteren Tag anzuzeigen</div>
                </button>
            }
        }
    </div>
</div>