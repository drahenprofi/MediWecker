@inherits LayoutComponentBase
@using MediWeckerUI.Application.Features.Navigation
@using MediWeckerUI.Application.Features.Notifications
@using MediWeckerUI.Application
@using MediWeckerUI.Application.Features.Planning
@using Index = MediWeckerUI.Pages.Index
@using System.Text.Json
@implements IDisposable

@if (RouteData != null)
{
    <CascadingValue Value="this">
        <RouteView RouteData="@RouteData" DefaultLayout="@typeof(MainLayout)"/>
    </CascadingValue>
}

@code {

    [Inject]
    public WebViewNavigationHistory NavigationHistory { get; set; }

    [Inject]
    public AppInterop AppInterop { get; set; }

    [Parameter]
    public RenderFragment PageRender { get; set; }

    public RouteData RouteData { get; set; }

    public string Id { get; set; }

    protected override void OnInitialized()
    {
        Id = Guid.NewGuid().ToString();
        RouteData = new RouteData(typeof(Index), new Dictionary<string, object>());

        AppInterop.RegisterOnReminderPromptShownRequestCallback(EventCallback.Factory.Create<ReminderPromptRequestData>(this, OnReminderPromptRequest));

        //Console.WriteLine($"BaseNavigationLayout: Created {Id}");
    }

    protected override async Task OnInitializedAsync()
    {
        await NavigationHistory.InitializeAsync();
        await base.OnInitializedAsync();

        // _ = Task.Run(async () =>
        // {
        //     await Task.Delay(TimeSpan.FromSeconds(1));
        //     await OnReminderPromptRequest(new ReminderPromptRequestData()
        //     {
        //         MedicineId = 1,
        //         ScheduledTimeUtc = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(),
        //         AlarmId = 1,
        //     });
        // });
    }

    protected async Task OnReminderPromptRequest(ReminderPromptRequestData data)
    {
        await Navigate<Pages.Reminders.Prompt>(nameof(Pages.Reminders.Prompt.RequestData), data);
    }

    public void Navigate<T>() where T : IComponent
    {
        RouteData = new RouteData(typeof(T), new Dictionary<string, object>());

        InvokeAsync(StateHasChanged);
    }

    public async Task Navigate<T>(Dictionary<string, object> parameters) where T : IComponent
    {
        RouteData = new RouteData(typeof(T), parameters);

        await InvokeAsync(StateHasChanged);
    }

    public async Task Navigate<T>(string routeParamKey1, object routeParamValue1) where T : IComponent
    {
        RouteData = new RouteData(typeof(T), new Dictionary<string, object> { [routeParamKey1] = routeParamValue1 });

        await InvokeAsync(StateHasChanged);
    }

    public async Task Navigate<T>(string routeParamKey1, object routeParamValue1, string routeParamKey2, object routeParamValue2) where T : IComponent
    {
        RouteData = new RouteData(typeof(T), new Dictionary<string, object> { [routeParamKey1] = routeParamValue1, [routeParamKey2] = routeParamValue2 });

        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        //Console.WriteLine($"BaseNavigationLayout: Disposing {Id}");
    }

}